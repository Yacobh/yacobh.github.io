{
"version":3,
"file":"module$node_modules$$supabase$realtime_js$dist$module$lib$transformers.js",
"lineCount":147,
"mappings":"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",
"sources":["node_modules/@supabase/realtime-js/dist/module/lib/transformers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$realtime_js$dist$module$lib$transformers\"] = function(global,require,module,exports) {\nObject.defineProperties(exports, {__esModule:{enumerable:true, value:true}, PostgresTypes:{enumerable:true, get:function() {\n  return PostgresTypes;\n}}, convertCell:{enumerable:true, get:function() {\n  return convertCell;\n}}, convertChangeData:{enumerable:true, get:function() {\n  return convertChangeData;\n}}, convertColumn:{enumerable:true, get:function() {\n  return convertColumn;\n}}, httpEndpointURL:{enumerable:true, get:function() {\n  return httpEndpointURL;\n}}, toArray:{enumerable:true, get:function() {\n  return toArray;\n}}, toBoolean:{enumerable:true, get:function() {\n  return toBoolean;\n}}, toJson:{enumerable:true, get:function() {\n  return toJson;\n}}, toNumber:{enumerable:true, get:function() {\n  return toNumber;\n}}, toTimestampString:{enumerable:true, get:function() {\n  return toTimestampString;\n}}});\nvar PostgresTypes;\n(function(PostgresTypes) {\n  PostgresTypes[\"abstime\"] = \"abstime\";\n  PostgresTypes[\"bool\"] = \"bool\";\n  PostgresTypes[\"date\"] = \"date\";\n  PostgresTypes[\"daterange\"] = \"daterange\";\n  PostgresTypes[\"float4\"] = \"float4\";\n  PostgresTypes[\"float8\"] = \"float8\";\n  PostgresTypes[\"int2\"] = \"int2\";\n  PostgresTypes[\"int4\"] = \"int4\";\n  PostgresTypes[\"int4range\"] = \"int4range\";\n  PostgresTypes[\"int8\"] = \"int8\";\n  PostgresTypes[\"int8range\"] = \"int8range\";\n  PostgresTypes[\"json\"] = \"json\";\n  PostgresTypes[\"jsonb\"] = \"jsonb\";\n  PostgresTypes[\"money\"] = \"money\";\n  PostgresTypes[\"numeric\"] = \"numeric\";\n  PostgresTypes[\"oid\"] = \"oid\";\n  PostgresTypes[\"reltime\"] = \"reltime\";\n  PostgresTypes[\"text\"] = \"text\";\n  PostgresTypes[\"time\"] = \"time\";\n  PostgresTypes[\"timestamp\"] = \"timestamp\";\n  PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n  PostgresTypes[\"timetz\"] = \"timetz\";\n  PostgresTypes[\"tsrange\"] = \"tsrange\";\n  PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\nconst convertChangeData = (columns, record, options = {}) => {\n  var _a;\n  const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n    return acc;\n  }, {});\n};\nconst convertColumn = (columnName, columns, record, skipTypes) => {\n  const column = columns.find(x => x.name === columnName);\n  const colType = column === null || column === void 0 ? void 0 : column.type;\n  const value = record[columnName];\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value);\n  }\n  return noop(value);\n};\nconst convertCell = (type, value) => {\n  if (type.charAt(0) === \"_\") {\n    const dataType = type.slice(1, type.length);\n    return toArray(value, dataType);\n  }\n  switch(type) {\n    case PostgresTypes.bool:\n      return toBoolean(value);\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value);\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value);\n    case PostgresTypes.timestamp:\n      return toTimestampString(value);\n    case PostgresTypes.abstime:\n    case PostgresTypes.date:\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime:\n    case PostgresTypes.text:\n    case PostgresTypes.time:\n    case PostgresTypes.timestamptz:\n    case PostgresTypes.timetz:\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value);\n    default:\n      return noop(value);\n  }\n};\nconst noop = value => {\n  return value;\n};\nconst toBoolean = value => {\n  switch(value) {\n    case \"t\":\n      return true;\n    case \"f\":\n      return false;\n    default:\n      return value;\n  }\n};\nconst toNumber = value => {\n  if (typeof value === \"string\") {\n    const parsedValue = parseFloat(value);\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n  return value;\n};\nconst toJson = value => {\n  if (typeof value === \"string\") {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`);\n      return value;\n    }\n  }\n  return value;\n};\nconst toArray = (value, type) => {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const lastIdx = value.length - 1;\n  const closeBrace = value[lastIdx];\n  const openBrace = value[0];\n  if (openBrace === \"{\" && closeBrace === \"}\") {\n    let arr;\n    const valTrim = value.slice(1, lastIdx);\n    try {\n      arr = JSON.parse(\"[\" + valTrim + \"]\");\n    } catch (_) {\n      arr = valTrim ? valTrim.split(\",\") : [];\n    }\n    return arr.map(val => convertCell(type, val));\n  }\n  return value;\n};\nconst toTimestampString = value => {\n  if (typeof value === \"string\") {\n    return value.replace(\" \", \"T\");\n  }\n  return value;\n};\nconst httpEndpointURL = socketUrl => {\n  let url = socketUrl;\n  url = url.replace(/^ws/i, \"http\");\n  url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, \"\");\n  return url.replace(/\\/+$/, \"\");\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperties","__esModule","enumerable","value","PostgresTypes","get","convertCell","convertChangeData","convertColumn","httpEndpointURL","toArray","toBoolean","toJson","toNumber","toTimestampString","columns","record","options","_a","skipTypes","keys","reduce","acc","rec_key","columnName","column","find","x","name","colType","type","includes","charAt","dataType","slice","length","bool","float4","float8","int2","int4","int8","numeric","oid","json","jsonb","timestamp","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","JSON","parse","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace","socketUrl","url"]
}
