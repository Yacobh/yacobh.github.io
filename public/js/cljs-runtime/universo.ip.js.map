{"version":3,"sources":["universo/ip.cljs"],"mappings":"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","names":["universo.ip/fetch-ip-info","ch","cljs.core.async.chan","js/console.log","js/fetch","response","js/Error","data","converted-data","cljs.core.js__GT_clj","cljs.core.async.put_BANG_","error","js/console.error","universo.ip/ip-test-component","result","reagent.core.atom","loading?","cljs.core/deref","cljs.core/reset!","c__11659__auto__","cljs.core.async.impl.dispatch/run","f__11660__auto__","switch__11495__auto__","state_12008","state_val_12009","inst_12000","inst_12001","statearr-12010","cljs.core.async.impl.ioc-helpers/take!","inst_12003","inst_12004","inst_12005","inst_12006","statearr-12011","cljs.core.async.impl.ioc-helpers/return-chan","statearr-12012","state-machine__11496__auto__","ret-value__11497__auto__","result__11498__auto__","cljs.core/keyword-identical?","ex__11499__auto__","e12013","statearr-12014","cljs.core/seq","statearr-12015","cljs.core/first","state__11661__auto__","statearr-12016","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","and__5000__auto__","cljs.core/not","universo.ip/simple-ip-test","ip-info","reagent.core.create_class","state_12024","state_val_12025","inst_12017","inst_12018","statearr-12026","inst_12020","inst_12021","inst_12022","statearr-12027","statearr-12028","e12029","statearr-12030","statearr-12031","statearr-12032","cljs.core/map?","universo.ip/minimal-test","status","state_12042","state_val_12043","inst_12033","inst_12034","inst_12035","statearr-12044","inst_12037","inst_12038","inst_12039","inst_12040","statearr-12045","statearr-12046","e12047","statearr-12048","statearr-12049","statearr-12050"],"sourcesContent":["(ns universo.ip\n  (:require [reagent.core :as r]\n            [cljs.core.async :as async :refer [go <!]]))\n\n;; \u2705 Funci\u00f3n con logs detallados\n(defn fetch-ip-info \"Usa fetch API nativo del navegador con logs\" []\n  (let [ch (async/chan)]\n\n    (js/console.log \"\ud83d\ude80 Iniciando fetch-ip-info...\")\n\n    (-> (js/fetch \"https://ipapi.co/json/\")\n        (.then (fn [response]\n                 (js/console.log \"\ud83d\udce1 Response recibido:\" response)\n                 (js/console.log \"\ud83d\udcca Status:\" (.-status response))\n                 (js/console.log \"\u2705 OK?:\" (.-ok response))\n\n                 (if (.-ok response)\n                   (do\n                     (js/console.log \"\ud83d\udd04 Convirtiendo a JSON...\")\n                     (.json response))\n                   (throw (js/Error. (str \"HTTP \" (.-status response)))))))\n\n        (.then (fn [data]\n                 (js/console.log \"\ud83d\udccb Data JSON recibida:\" data)\n                 (let [converted-data (js->clj data :keywordize-keys true)]\n                   (js/console.log \"\ud83d\udd04 Data convertida a ClojureScript:\" converted-data)\n                   (async/put! ch {:success true\n                                   :data converted-data}))))\n\n        (.catch (fn [error]\n                  (js/console.error \"\u274c Error capturado:\" error)\n                  (js/console.error \"\u274c Mensaje del error:\" (.-message error))\n                  (async/put! ch {:success false\n                                  :error (.-message error)}))))\n\n    (js/console.log \"\ud83d\udce4 Retornando canal...\")\n    ch))\n\n;; \ud83d\udda5\ufe0f Componente b\u00e1sico\n(defn ip-test-component []\n  (let [result (r/atom {:status \"inicial\"})\n        loading? (r/atom false)]\n\n    (fn []\n      [:div\n       [:h3 \"Prueba de fetch-ip-info\"]\n\n       [:button\n        {:disabled @loading?\n         :on-click (fn []\n                     (js/console.log \"\ud83c\udfaf Bot\u00f3n clickeado!\")\n                     (reset! loading? true)\n                     (reset! result {:status \"cargando...\"})\n\n                     (go\n                       (js/console.log \"\ud83c\udfc3 Ejecutando go block...\")\n                       (let [response (<! (fetch-ip-info))]\n                         (js/console.log \"\ud83c\udf89 Respuesta final recibida:\" response)\n                         (reset! loading? false)\n                         (reset! result response))))}\n        (if @loading? \"Cargando...\" \"Probar API\")]\n\n       [:div\n        [:h4 \"Resultado:\"]\n        [:p (str @result)]\n\n        ;; Mostrar datos espec\u00edficos si hay \u00e9xito\n        (when (and (:success @result) (:data @result))\n          (let [data (:data @result)]\n            [:div\n             [:h4 \"Datos obtenidos:\"]\n             [:p \"IP: \" (:ip data)]\n             [:p \"Pa\u00eds: \" (:country_name data)]\n             [:p \"Ciudad: \" (:city data)]\n             [:p \"ISP: \" (:org data)]]))\n\n        ;; Mostrar error si falla\n        (when (and (not (:success @result)) (:error @result))\n          [:div\n           [:h4 \"Error:\"]\n           [:p (:error @result)]])]])))\n\n;; \ud83c\udfaf Versi\u00f3n autom\u00e1tica s\u00faper simple\n(defn simple-ip-test []\n  (let [ip-info (r/atom \"No cargado\")]\n\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (js/console.log \"\ud83c\udfac Componente montado, iniciando fetch...\")\n        (go\n          (js/console.log \"\u23f3 Llamando fetch-ip-info...\")\n          (let [result (<! (fetch-ip-info))]\n            (js/console.log \"\ud83c\udfc1 Resultado final:\" result)\n            (reset! ip-info result))))\n\n      :reagent-render\n      (fn []\n        [:div\n         [:h3 \"Test Simple (autom\u00e1tico)\"]\n         [:p \"Resultado: \" (str @ip-info)]\n         (when (map? @ip-info)\n           [:div\n            (if (:success @ip-info)\n              [:p \"\u00c9xito: \" (str (:data @ip-info))]\n              [:p \"Error: \" (str (:error @ip-info))])])])})))\n\n;; \ud83d\udd25 Test s\u00faper minimalista\n(defn minimal-test []\n  (let [status (r/atom \"inicial\")]\n\n    [:div\n     [:h2 \"TEST M\u00cdNIMO\"]\n     [:p \"Status: \" @status]\n     [:button\n      {:on-click (fn []\n                   (js/console.log \"Click!\")\n                   (reset! status \"clickeado\")\n                   (go\n                     (js/console.log \"Go block ejecutado\")\n                     (reset! status \"go ejecutado\")\n                     (let [result (<! (fetch-ip-info))]\n                       (js/console.log \"Resultado:\" result)\n                       (reset! status (str \"Resultado: \" result)))))}\n      \"CLICK AQU\u00cd\"]]))\n"]}