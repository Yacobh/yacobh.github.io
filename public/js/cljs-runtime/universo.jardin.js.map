{"version":3,"sources":["universo/jardin.cljs"],"mappings":"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","names":["js/universo","js/universo.jardin","js/universo.jardin.app-state","universo.jardin/app-state","reagent.core.atom","universo.jardin/init-particles","n","cljs.core.swap_BANG_","cljs.core/assoc","universo.physics/generate-quantum-particles","universo.jardin/quantum-simulator","cljs.core/deref","state","cljs.core/update","cljs.core/not","iter__5480__auto__","s__12306","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12309","cljs.core/chunk-buffer","i__12308","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12305","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","particle","universo.jardin/particle-position","universo.jardin/particle-state","universo.jardin/state-controls","cljs.core/reset!","universo.jardin/quantum-dot","pos","cljs.core._EQ_","universo.jardin/jardin","cljs.core/chunk-first"],"sourcesContent":["(ns universo.jardin\n  (:require\n   [reagent.core :as r]\n   [universo.physics :as physics]))\n\n;; Estado global de la simulaci\u00f3n\n(defonce app-state\n  (r/atom\n   {:particles []\n    :wave-function nil\n    :simulation-running false}))\n\n;; Funci\u00f3n para inicializar part\u00edculas\n(defn init-particles [n]\n  (swap! app-state\n         assoc :particles\n         (physics/generate-quantum-particles n)))\n\n\n;; Componente principal de visualizaci\u00f3n\n(defn quantum-simulator []\n  (let [state @app-state]\n    [:div.quantum-container\n     [:h1 \"Quantum Particle Simulator\"]\n\n     ;; Panel de control\n     [:div.control-panel\n      [:button\n       {:on-click #(init-particles 20)}\n       \"Generate 10 Particles\"]\n\n      [:button\n       {:on-click #(swap! app-state update :simulation-running not)}\n       (if (:simulation-running state)\n         \"Stop Simulation\"\n         \"Start Simulation\")]]\n\n     ;; \u00c1rea de visualizaci\u00f3n\n     [:div.visualization-area\n      (for [particle (:particles state)]\n        ^{:key (:id particle)}\n        [:div.quantum-particle\n         {:style\n          {:left (str (:x particle) \"px\")\n           :top (str (:y particle) \"px\")}}])]]))\n\n\n\n(def particle-position (r/atom {:x \"50%\" :y \"40%\"}))\n(def particle-state (r/atom :fundamental))\n\n\n\n(defn state-controls []\n  [:div\n   [:button {:on-click #(reset! particle-state :fundamental)} \"Fundamental\"]\n   [:button {:on-click #(reset! particle-state :excited)} \"Excited\"]])\n\n\n\n(defn quantum-dot []\n  (let [state @particle-state\n        pos @particle-position]\n    [:div.quantum-dot\n     {:style {:left (:x pos)\n              :top (:y pos)\n              :transform \"translate(-50%, -50%)\"\n              :background-color (if (= state :excited) \"#ff0\" \"#0ff\")} ; Ejemplo de cambio de color\n      :class (when (= state :excited) \"excited-state\")}] ; A\u00f1ade una clase condicional\n    ))\n\n(defn jardin []\n  [:div\n   [state-controls]\n   [quantum-dot]])\n"]}