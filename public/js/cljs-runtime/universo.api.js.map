{"version":3,"sources":["universo/api.cljs"],"mappings":";AAGA,wCAAA,xCAAMA;AAAN,AACE,IAAMC,gBAAc,gDAAA,2CAAA,4DAAA,MAAA,uDAAA,IAAA,sEAAA,WAAA,2EAAA,pXAACC;AAArB,AAKE,qCAAA,rCAAMC,6GAAuBC;AAA7B,AACE,+FAAA,+HAAA,+EAAA,yJAAA,/bAACC,0DAAMJ,cAAcK,4EACJ,AAAYF,0HACf,CAAA,QAAO,AAASA,qFACT,uEAAA,rDAAI,AAACG,SAAY,AAAgBH,uBAC/B,AAAgBA,4GAEf,6EAAA,3DAAI,AAACG,SAAY,AAAmBH,0BAClC,AAAmBA;;;AAG/C,uCAAA,vCAAMI,iHAAyBJ;AAA/B,AACE,AAACD,mCAAsBC;;AAGvB,yBAAA,iBAAA,1CAAmBA;AAAnB,AACoB,wFAAA,jFAACC,mDAAMJ,cAAcK,4EAAgB,AAAYF;;;AACrE,yBAAA,cAAA,vCAAmBA;AAAnB,AACoB,wFAAA,jFAACC,mDAAMJ,cAAcK,uEAAa,CAAA,QAAO,AAASF;;;AACtE,yBAAA,qBAAA,9CAAmBA;AAAnB,AACoB,wFAAA,jFAACC,mDAAMJ,cAAcK,sFACd,uEAAA,rDAAI,AAACC,SAAY,AAAgBH,uBAC/B,AAAgBA;;;AAE7C,gCAAA,wBAAA,jDAAmBA;AAAnB,AACoB,wFAAA,jFAACC,mDAAMJ,cAAcK,2FACd,6EAAA,3DAAI,AAACC,SAAY,AAAmBH,0BAClC,AAAmBA;;;;AAGlD,+DAAA,2CAAA,nGAACK,uLACsB;AAAA,AACE,oBAAM,AAAcC;AAApB,OACM,AAAaA,AACb,4BAAOF,nCACP,+EAAA,WAAAG;AAAA,AAAS,qBAAA,6CAAAA,3DAACC;;;AAHhB;;GAFzB,yEAMkB;AAAA,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,oCAAA,mFAAA,mDAAA,mFAAA,iPAAA,mFAAA,sFAAA,mFAAA,gFAAA,2CAAA,uDAAA,2CAAA,wOAAA,p4BAIQ,CAAA,4KAAA,tHAAe,AAAA,qFAAA,AAAAC,gBAASZ,ujBAES,mKAAA,tHAAK,AAAA,qFAAA,AAAAY,gBAASZ,2GACH,6IAAA,3HAAI,AAAA,0FAAA,AAAAY,gBAAYZ,yBAEd,iIAAA,MAAA,iIAAA,SAAA,AAAA,/QACE,wHAAA,vHAAG,AAAA,qFAAA,AAAAY,gBAASZ,iCACZ,wHAAA,vHAAG,AAAA,qFAAA,AAAAY,gBAASZ;oCAXpE,mFAAA,mPAAA,mFAAA,0bAAA,mFAAA,ryBAaQ,CAAA,WAAgB,6IAAA,WAAA,tIAAI,AAAA,0FAAA,AAAAY,gBAAYZ,8LAChC,CAAA,6BACK,qVAAA,nUAAI,AAAA,0FAAA,AAAAY,gBAAYZ,iBACd,kLAAA,rIAAK,AAAA,oGAAA,AAAAY,gBAAgBZ,iMAE5B,CAAA,gCACK,yVAAA,vVAAI,AAACa,cAAI,AAAA,0FAAA,AAAAD,gBAAYZ,kBACnB,uLAAA,1IAAK,AAAA,yGAAA,AAAAY,gBAAmBZ","names":["universo.api/battery-status-component","battery-state","reagent.core.atom","universo.api/update-battery-status","battery","cljs.core.swap_BANG_","cljs.core/assoc","js/isFinite","universo.api/setup-battery-listeners","reagent.core.create_class","js/navigator","p1__12007#","js/console.error","cljs.core/deref","cljs.core/not"],"sourcesContent":["(ns universo.api\n  (:require [reagent.core :as r]))\n\n(defn battery-status-component []\n  (let [battery-state (r/atom {:charging false\n                               :level 0\n                               :chargingTime \"Infinito\"\n                               :dischargingTime \"Infinito\"})]\n\n    (defn update-battery-status [battery]\n      (swap! battery-state assoc\n             :charging (.-charging battery)\n             :level (* 100 (.-level battery))\n             :chargingTime (if (js/isFinite (.-chargingTime battery))\n                             (.-chargingTime battery)\n                             \"Infinito\")\n             :dischargingTime (if (js/isFinite (.-dischargingTime battery))\n                                (.-dischargingTime battery)\n                                \"Infinito\")))\n\n    (defn setup-battery-listeners [battery]\n      (update-battery-status battery)\n\n      ;; Configurar listeners para eventos de cambio\n      (.addEventListener battery \"chargingchange\"\n                         #(swap! battery-state assoc :charging (.-charging battery)))\n      (.addEventListener battery \"levelchange\"\n                         #(swap! battery-state assoc :level (* 100 (.-level battery))))\n      (.addEventListener battery \"chargingtimechange\"\n                         #(swap! battery-state assoc :chargingTime\n                                 (if (js/isFinite (.-chargingTime battery))\n                                   (.-chargingTime battery)\n                                   \"Infinito\")))\n      (.addEventListener battery \"dischargingtimechange\"\n                         #(swap! battery-state assoc :dischargingTime\n                                 (if (js/isFinite (.-dischargingTime battery))\n                                   (.-dischargingTime battery)\n                                   \"Infinito\"))))\n\n    (r/create-class\n     {:component-did-mount (fn []\n                             (when (.-getBattery js/navigator)\n                               (-> (.getBattery js/navigator)\n                                   (.then setup-battery-listeners)\n                                   (.catch #(js/console.error \"Error accediendo a la API de bater\u00eda:\" %)))))\n      :reagent-render (fn []\n                        [:div\n                         [:h2 \"Estado de la Bater\u00eda\"]\n                         [:div\n                          [:p (str \"Nivel: \" (:level @battery-state) \"%\")]\n                          [:div.battery-indicator\n                           [:div.battery-level {:style {:width (str (:level @battery-state) \"%\")\n                                                        :background-color (if (:charging @battery-state)\n                                                                            \"green\"\n                                                                            (cond\n                                                                              (< (:level @battery-state) 20) \"red\"\n                                                                              (< (:level @battery-state) 50) \"orange\"\n                                                                              :else \"lightgreen\"))}}]]\n                          [:p (str \"Estado: \" (if (:charging @battery-state) \"Cargando\" \"Descargando\"))]\n                          [:p (str \"Tiempo de carga restante: \"\n                                   (if (:charging @battery-state)\n                                     (str (:chargingTime @battery-state) \" segundos\")\n                                     \"N/A\"))]\n                          [:p (str \"Tiempo de descarga restante: \"\n                                   (if (not (:charging @battery-state))\n                                     (str (:dischargingTime @battery-state) \" segundos\")\n                                     \"N/A\"))]]])})))\n"]}