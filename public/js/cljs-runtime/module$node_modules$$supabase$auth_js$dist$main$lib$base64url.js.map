{
"version":3,
"file":"module$node_modules$$supabase$auth_js$dist$main$lib$base64url.js",
"lineCount":134,
"mappings":"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",
"sources":["node_modules/@supabase/auth-js/dist/main/lib/base64url.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$auth_js$dist$main$lib$base64url\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Avoid modifying this file. It's part of\n * https://github.com/supabase-community/base64url-js.  Submit all fixes on\n * that repo!\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringToUint8Array = exports.base64UrlToUint8Array = exports.stringFromUTF8 = exports.stringToUTF8 = exports.codepointToUTF8 = exports.stringFromBase64URL = exports.stringToBase64URL = exports.byteFromBase64URL = exports.byteToBase64URL = void 0;\n/**\n * An array of characters that encode 6 bits into a Base64-URL alphabet\n * character.\n */\nconst TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\n/**\n * An array of characters that can appear in a Base64-URL encoded string but\n * should be ignored.\n */\nconst IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\n/**\n * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\n * used to skip the character, or if -1 used to error out.\n */\nconst FROM_BASE64URL = (() => {\n    const charMap = new Array(128);\n    for (let i = 0; i < charMap.length; i += 1) {\n        charMap[i] = -1;\n    }\n    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {\n        charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;\n    }\n    for (let i = 0; i < TO_BASE64URL.length; i += 1) {\n        charMap[TO_BASE64URL[i].charCodeAt(0)] = i;\n    }\n    return charMap;\n})();\n/**\n * Converts a byte to a Base64-URL string.\n *\n * @param byte The byte to convert, or null to flush at the end of the byte sequence.\n * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n * @param emit A function called with the next Base64 character when ready.\n */\nfunction byteToBase64URL(byte, state, emit) {\n    if (byte !== null) {\n        state.queue = (state.queue << 8) | byte;\n        state.queuedBits += 8;\n        while (state.queuedBits >= 6) {\n            const pos = (state.queue >> (state.queuedBits - 6)) & 63;\n            emit(TO_BASE64URL[pos]);\n            state.queuedBits -= 6;\n        }\n    }\n    else if (state.queuedBits > 0) {\n        state.queue = state.queue << (6 - state.queuedBits);\n        state.queuedBits = 6;\n        while (state.queuedBits >= 6) {\n            const pos = (state.queue >> (state.queuedBits - 6)) & 63;\n            emit(TO_BASE64URL[pos]);\n            state.queuedBits -= 6;\n        }\n    }\n}\nexports.byteToBase64URL = byteToBase64URL;\n/**\n * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\n *\n * @param charCode The char code of the JavaScript string.\n * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n * @param emit A function called with the next byte.\n */\nfunction byteFromBase64URL(charCode, state, emit) {\n    const bits = FROM_BASE64URL[charCode];\n    if (bits > -1) {\n        // valid Base64-URL character\n        state.queue = (state.queue << 6) | bits;\n        state.queuedBits += 6;\n        while (state.queuedBits >= 8) {\n            emit((state.queue >> (state.queuedBits - 8)) & 0xff);\n            state.queuedBits -= 8;\n        }\n    }\n    else if (bits === -2) {\n        // ignore spaces, tabs, newlines, =\n        return;\n    }\n    else {\n        throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\n    }\n}\nexports.byteFromBase64URL = byteFromBase64URL;\n/**\n * Converts a JavaScript string (which may include any valid character) into a\n * Base64-URL encoded string. The string is first encoded in UTF-8 which is\n * then encoded as Base64-URL.\n *\n * @param str The string to convert.\n */\nfunction stringToBase64URL(str) {\n    const base64 = [];\n    const emitter = (char) => {\n        base64.push(char);\n    };\n    const state = { queue: 0, queuedBits: 0 };\n    stringToUTF8(str, (byte) => {\n        byteToBase64URL(byte, state, emitter);\n    });\n    byteToBase64URL(null, state, emitter);\n    return base64.join('');\n}\nexports.stringToBase64URL = stringToBase64URL;\n/**\n * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\n * that the underlying string has been encoded as UTF-8.\n *\n * @param str The Base64-URL encoded string.\n */\nfunction stringFromBase64URL(str) {\n    const conv = [];\n    const utf8Emit = (codepoint) => {\n        conv.push(String.fromCodePoint(codepoint));\n    };\n    const utf8State = {\n        utf8seq: 0,\n        codepoint: 0,\n    };\n    const b64State = { queue: 0, queuedBits: 0 };\n    const byteEmit = (byte) => {\n        stringFromUTF8(byte, utf8State, utf8Emit);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n        byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\n    }\n    return conv.join('');\n}\nexports.stringFromBase64URL = stringFromBase64URL;\n/**\n * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\n *\n * @param codepoint The Unicode codepoint.\n * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\n */\nfunction codepointToUTF8(codepoint, emit) {\n    if (codepoint <= 0x7f) {\n        emit(codepoint);\n        return;\n    }\n    else if (codepoint <= 0x7ff) {\n        emit(0xc0 | (codepoint >> 6));\n        emit(0x80 | (codepoint & 0x3f));\n        return;\n    }\n    else if (codepoint <= 0xffff) {\n        emit(0xe0 | (codepoint >> 12));\n        emit(0x80 | ((codepoint >> 6) & 0x3f));\n        emit(0x80 | (codepoint & 0x3f));\n        return;\n    }\n    else if (codepoint <= 0x10ffff) {\n        emit(0xf0 | (codepoint >> 18));\n        emit(0x80 | ((codepoint >> 12) & 0x3f));\n        emit(0x80 | ((codepoint >> 6) & 0x3f));\n        emit(0x80 | (codepoint & 0x3f));\n        return;\n    }\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\n}\nexports.codepointToUTF8 = codepointToUTF8;\n/**\n * Converts a JavaScript string to a sequence of UTF-8 bytes.\n *\n * @param str  The string to convert to UTF-8.\n * @param emit Function which will be called for each UTF-8 byte of the string.\n */\nfunction stringToUTF8(str, emit) {\n    for (let i = 0; i < str.length; i += 1) {\n        let codepoint = str.charCodeAt(i);\n        if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\n            // most UTF-16 codepoints are Unicode codepoints, except values in this\n            // range where the next UTF-16 codepoint needs to be combined with the\n            // current one to get the Unicode codepoint\n            const highSurrogate = ((codepoint - 0xd800) * 0x400) & 0xffff;\n            const lowSurrogate = (str.charCodeAt(i + 1) - 0xdc00) & 0xffff;\n            codepoint = (lowSurrogate | highSurrogate) + 0x10000;\n            i += 1;\n        }\n        codepointToUTF8(codepoint, emit);\n    }\n}\nexports.stringToUTF8 = stringToUTF8;\n/**\n * Converts a UTF-8 byte to a Unicode codepoint.\n *\n * @param byte  The UTF-8 byte next in the sequence.\n * @param state The shared state between consecutive UTF-8 bytes in the\n *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\n * @param emit  Function which will be called for each codepoint.\n */\nfunction stringFromUTF8(byte, state, emit) {\n    if (state.utf8seq === 0) {\n        if (byte <= 0x7f) {\n            emit(byte);\n            return;\n        }\n        // count the number of 1 leading bits until you reach 0\n        for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {\n            if (((byte >> (7 - leadingBit)) & 1) === 0) {\n                state.utf8seq = leadingBit;\n                break;\n            }\n        }\n        if (state.utf8seq === 2) {\n            state.codepoint = byte & 31;\n        }\n        else if (state.utf8seq === 3) {\n            state.codepoint = byte & 15;\n        }\n        else if (state.utf8seq === 4) {\n            state.codepoint = byte & 7;\n        }\n        else {\n            throw new Error('Invalid UTF-8 sequence');\n        }\n        state.utf8seq -= 1;\n    }\n    else if (state.utf8seq > 0) {\n        if (byte <= 0x7f) {\n            throw new Error('Invalid UTF-8 sequence');\n        }\n        state.codepoint = (state.codepoint << 6) | (byte & 63);\n        state.utf8seq -= 1;\n        if (state.utf8seq === 0) {\n            emit(state.codepoint);\n        }\n    }\n}\nexports.stringFromUTF8 = stringFromUTF8;\n/**\n * Helper functions to convert different types of strings to Uint8Array\n */\nfunction base64UrlToUint8Array(str) {\n    const result = [];\n    const state = { queue: 0, queuedBits: 0 };\n    const onByte = (byte) => {\n        result.push(byte);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n        byteFromBase64URL(str.charCodeAt(i), state, onByte);\n    }\n    return new Uint8Array(result);\n}\nexports.base64UrlToUint8Array = base64UrlToUint8Array;\nfunction stringToUint8Array(str) {\n    const result = [];\n    stringToUTF8(str, (byte) => result.push(byte));\n    return new Uint8Array(result);\n}\nexports.stringToUint8Array = stringToUint8Array;\n//# sourceMappingURL=base64url.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","byteToBase64URL","byte","state","emit","queue","queuedBits","TO_BASE64URL","byteFromBase64URL","charCode","bits","FROM_BASE64URL","Error","String","fromCharCode","codepointToUTF8","codepoint","toString","stringToUTF8","str","i","length","charCodeAt","highSurrogate","stringFromUTF8","utf8seq","leadingBit","Object","defineProperty","value","stringToUint8Array","base64UrlToUint8Array","stringFromBase64URL","stringToBase64URL","IGNORE_BASE64URL","charMap","Array","base64","emitter","char","push","join","conv","utf8Emit","fromCodePoint","utf8State","b64State","byteEmit","result","onByte","Uint8Array"]
}
