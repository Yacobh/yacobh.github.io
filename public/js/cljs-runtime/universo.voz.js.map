{"version":3,"sources":["universo/voz.cljs"],"mappings":"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","names":["universo.voz/list-voices","js/window","js/window.speechSynthesis","voices","p1__11999#","cljs.core.filter","cljs.core/re-find","universo.voz/speak-with-voice","text","voice","synthesis","utterance","js/SpeechSynthesisUtterance","universo.voz/voice-selector","selected-voice-index","reagent.core.atom","cljs.core/deref","current-voice","cljs.core.get","e","index","js/parseInt","cljs.core/reset!","cljs.core.map_indexed","idx","selected-voice","cljs.core.nth","cljs.core.println","cljs.core/first","universo.voz/speak-text","temp__5804__auto__","cljs.core/seq","spanish-voices","p1__12001#","universo.voz/speech-component","p1__12002#"],"sourcesContent":["(ns universo.voz\n  (:require [reagent.core :as reagent]))\n\n(defn list-voices []\n  (when (exists? js/window.speechSynthesis)\n    (let [voices (.getVoices js/window.speechSynthesis)]\n      (filter #(re-find #\"es-\" (.-lang %)) voices)\n      #_(filter #(re-find #\"en-\" (.-lang %)) voices)\n      #_voices)))\n\n(defn speak-with-voice [text voice]\n  (when (exists? js/window.speechSynthesis)\n    (let [synthesis js/window.speechSynthesis\n          utterance (js/SpeechSynthesisUtterance. text)]\n\n      (set! (.-voice utterance) voice)\n      (set! (.-rate utterance) 2.0)     ; Velocidad de habla (0.1 a 10)\n      (set! (.-pitch utterance) 0.0)    ; Tono de voz (0 a 2)\n      (set! (.-volume utterance) 1.0)   ; Volumen (0 a 1)\n      (set! (.-lang utterance) \"es-ES\") ; Idioma espa\u00f1ol de Espa\u00f1a\n      (.speak synthesis utterance))))\n\n(defn voice-selector []\n  (let [voices (list-voices)\n        selected-voice-index (reagent/atom 0)]\n    (fn []\n      (let [current-voice (get voices @selected-voice-index)]\n        [:div\n         [:select\n          {:value @selected-voice-index\n           :on-change (fn [e]\n                        (let [index (-> e .-target .-value js/parseInt)]\n                          (reset! selected-voice-index index)))}\n          (map-indexed\n           (fn [idx voice]\n             ^{:key idx}\n             [:option\n              {:value idx}\n              (str (.-name voice) \" (\" (.-lang voice) \")\")])\n           voices)]\n\n         [:button\n          {:on-click (fn []\n                       (let [selected-voice (nth voices @selected-voice-index 0)]\n                         (println \"Voces disponibles:\" voices)\n                         (println \"Voces 1\" (.-name (nth voices @selected-voice-index 0)))\n                         (println \"Voces 2\" (str (.-name (first voices)) \" (\" (.-lang (first voices)) \")\"))\n                         (println \"\u00cdndice seleccionado:\" @selected-voice-index)\n                         (println \"Voz seleccionada:\" selected-voice)\n                         (println \"Nombre de la voz:\" (.-name selected-voice))\n                         (println \"Idioma de la voz:\" (.-lang selected-voice))\n                         (speak-with-voice \"Hola nilda Bienvenida al portal de; Jacobo C\u00f3rdova. \u00bfen qu\u00e9 puedo ayudarle?\" selected-voice)\n                         #_(speak-with-voice \"no\" selected-voice)\n                         ))}\n          \"Hablar\"]]))))\n\n(defn speak-text [text]\n  (when (exists? js/window.speechSynthesis)\n    (let [synthesis js/window.speechSynthesis\n          utterance (js/SpeechSynthesisUtterance. text)]\n      ;; Configuraci\u00f3n predeterminada\n      (set! (.-rate utterance) 1.0)     ; Velocidad de habla (0.1 a 10)\n      (set! (.-pitch utterance) 1.0)    ; Tono de voz (0 a 2)\n      (set! (.-volume utterance) 1.0)   ; Volumen (0 a 1)\n      (set! (.-lang utterance) \"es-ES\") ; Idioma espa\u00f1ol de Espa\u00f1a\n\n      ;; Opcional: Seleccionar una voz espec\u00edfica\n      (when-let [voices (seq (.getVoices synthesis))]\n        (let [spanish-voices (filter #(re-find #\"es-\" (.-lang %)) voices)]\n          (when (seq spanish-voices)\n            (set! (.-voice utterance) (first spanish-voices)))))\n\n      ;; Reproducir el audio\n      (.speak synthesis utterance))))\n\n\n(defn speech-component []\n  (let [text (reagent/atom \"\")]\n    (fn []\n      [:div\n       [:input\n        {:type \"text\"\n         :value @text\n         :on-change #(reset! text (-> % .-target .-value))}]\n       [:button\n        {:on-click #(speak-text @text)}\n        \"Hablar\"]])))\n"]}