{"version":3,"sources":["universo/battery.cljs"],"mappings":";AAGA,yCAAA,zCAAMA,0FAAuBC,QAAQC;AAArC,AACE,+FAAA,+HAAA,+EAAA,yJAAA,/bAACC,0DAAMD,cAAcE,4EACJ,AAAYH,0HACf,CAAA,QAAO,AAASA,qFACT,uEAAA,rDAAI,AAACI,SAAY,AAAgBJ,uBAC/B,AAAgBA,4GAEf,6EAAA,3DAAI,AAACI,SAAY,AAAmBJ,0BAClC,AAAmBA;;AAG/C,2CAAA,3CAAMK,8FAAyBL,QAAQC;AAAvC,AACE,AAACF,uCAAsBC,QAAQC;;AAG/B,yBAAA,iBAAA,1CAAmBD;AAAnB,AACoB,wFAAA,jFAACE,mDAAMD,cAAcE,4EAAgB,AAAYH;;;AACrE,yBAAA,cAAA,vCAAmBA;AAAnB,AACoB,wFAAA,jFAACE,mDAAMD,cAAcE,uEAAa,CAAA,QAAO,AAASH;;;AACtE,yBAAA,qBAAA,9CAAmBA;AAAnB,AACoB,wFAAA,jFAACE,mDAAMD,cAAcE,sFACd,uEAAA,rDAAI,AAACC,SAAY,AAAgBJ,uBAC/B,AAAgBA;;;AAE7C,gCAAA,wBAAA,jDAAmBA;AAAnB,AACoB,wFAAA,jFAACE,mDAAMD,cAAcE,2FACd,6EAAA,3DAAI,AAACC,SAAY,AAAmBJ,0BAClC,AAAmBA;;;AAGlD,4CAAA,5CAAMM;AAAN,AACE,IAAML,gBAAc,gDAAA,2CAAA,4DAAA,MAAA,uDAAA,IAAA,sEAAA,WAAA,2EAAA,pXAACM;AAArB,AAIE,+DAAA,2CAAA,nGAACC,uLACsB;AAAA,AACE,oBAAM,AAAcC;AAApB,OACM,AAAaA,AACb,4BAAA,WAAAC,9CACA;AADA,AAAQ,gDAAAA,zCAACL,0DAA0BJ;UACnC,WAAAU;AAAA,AAAS,qBAAA,6CAAAA,3DAACC;;;AAHhB;;GAFzB,yEAMkB;AAAA,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,oCAAA,mFAAA,mDAAA,mFAAA,iPAAA,mFAAA,sFAAA,mFAAA,gFAAA,2CAAA,uDAAA,2CAAA,wOAAA,p4BAIQ,CAAA,4KAAA,tHAAe,AAAA,qFAAA,AAAAC,gBAASZ,ujBAES,mKAAA,tHAAK,AAAA,qFAAA,AAAAY,gBAASZ,2GACH,6IAAA,3HAAI,AAAA,0FAAA,AAAAY,gBAAYZ,yBAEd,iIAAA,MAAA,iIAAA,SAAA,AAAA,/QACE,wHAAA,vHAAG,AAAA,qFAAA,AAAAY,gBAASZ,iCACZ,wHAAA,vHAAG,AAAA,qFAAA,AAAAY,gBAASZ;oCAXpE,mFAAA,mPAAA,mFAAA,kcAAA,mFAAA,7yBAaQ,CAAA,WAAgB,6IAAA,WAAA,tIAAI,AAAA,0FAAA,AAAAY,gBAAYZ,8LAChC,CAAA,6BACK,6VAAA,3UAAI,AAAA,0FAAA,AAAAY,gBAAYZ,iBAEd,2LAAA,9IAAK,uIAAA,tIAAG,AAAA,oGAAA,AAAAY,gBAAgBZ,wMAE/B,CAAA,gCACK,yVAAA,vVAAI,AAACa,cAAI,AAAA,0FAAA,AAAAD,gBAAYZ,kBACnB,uLAAA,1IAAK,AAAA,yGAAA,AAAAY,gBAAmBZ","names":["universo.battery/update-battery-status","battery","battery-state","cljs.core.swap_BANG_","cljs.core/assoc","js/isFinite","universo.battery/setup-battery-listeners","universo.battery/battery-status-component","reagent.core.atom","reagent.core.create_class","js/navigator","p1__11896#","p1__11897#","js/console.error","cljs.core/deref","cljs.core/not"],"sourcesContent":["(ns universo.battery\n  (:require [reagent.core :as r]))\n\n(defn update-battery-status [battery battery-state]\n  (swap! battery-state assoc\n         :charging (.-charging battery)\n         :level (* 100 (.-level battery))\n         :chargingTime (if (js/isFinite (.-chargingTime battery))\n                         (.-chargingTime battery)\n                         \"Infinito\")\n         :dischargingTime (if (js/isFinite (.-dischargingTime battery))\n                            (.-dischargingTime battery)\n                            \"Infinito\")))\n\n(defn setup-battery-listeners [battery battery-state]\n  (update-battery-status battery battery-state)\n\n  ;; Configurar listeners para eventos de cambio\n  (.addEventListener battery \"chargingchange\"\n                     #(swap! battery-state assoc :charging (.-charging battery)))\n  (.addEventListener battery \"levelchange\"\n                     #(swap! battery-state assoc :level (* 100 (.-level battery))))\n  (.addEventListener battery \"chargingtimechange\"\n                     #(swap! battery-state assoc :chargingTime\n                             (if (js/isFinite (.-chargingTime battery))\n                               (.-chargingTime battery)\n                               \"Infinito\")))\n  (.addEventListener battery \"dischargingtimechange\"\n                     #(swap! battery-state assoc :dischargingTime\n                             (if (js/isFinite (.-dischargingTime battery))\n                               (.-dischargingTime battery)\n                               \"Infinito\"))))\n\n(defn battery-status-component []\n  (let [battery-state (r/atom {:charging false\n                               :level 0\n                               :chargingTime \"Infinito\"\n                               :dischargingTime \"Infinito\"})]\n    (r/create-class\n     {:component-did-mount (fn []\n                             (when (.-getBattery js/navigator)\n                               (-> (.getBattery js/navigator)\n                                   (.then #(setup-battery-listeners % battery-state))\n                                   (.catch #(js/console.error \"Error accediendo a la API de bater\u00eda:\" %)))))\n      :reagent-render (fn []\n                        [:div\n                         [:h2 \"Estado de la Bater\u00eda\"]\n                         [:div\n                          [:p (str \"Nivel: \" (:level @battery-state) \"%\")]\n                          [:div.battery-indicator\n                           [:div.battery-level {:style {:width (str (:level @battery-state) \"%\")\n                                                        :background-color (if (:charging @battery-state)\n                                                                            \"green\"\n                                                                            (cond\n                                                                              (< (:level @battery-state) 20) \"red\"\n                                                                              (< (:level @battery-state) 50) \"orange\"\n                                                                              :else \"lightgreen\"))}}]]\n                          [:p (str \"Estado: \" (if (:charging @battery-state) \"Cargando\" \"Descargando\"))]\n                          [:p (str \"Tiempo de carga restante: \"\n                                   (if (:charging @battery-state)\n                                     #_(str (:chargingTime @battery-state) \" segundos\")\n                                     (str (/ (:chargingTime @battery-state) 60) \" minutos\")\n                                     \"N/A\"))]\n                          [:p (str \"Tiempo de descarga restante: \"\n                                   (if (not (:charging @battery-state))\n                                     (str (:dischargingTime @battery-state) \" segundos\")\n                                     \"N/A\"))]]])})))\n"]}